{"version":3,"sources":["components/base/template.js","components/base/webcomponent.js","components/dropdown/dropdown.js","index.js"],"names":["Template","template","document","createElement","style","immutableStyle","html","immutableHtml","attributes","render","name","content","cloneNode","that","matcher","test","newHtml","replace","$match","$open","$attribute","$close","updateAttributePlaceholders","innerHTML","Object","WebComponent","Error","mode","setAttributes","_shadowRoot","attachShadow","appendChild","getCloned","onConnect","onDisconnect","oldValue","newValue","newAttributes","_updateDataElement","onAttributeChanged","onAdopted","value","el","querySelector","element","window","customElements","define","HTMLElement","_DropDownTemplate","context","options","toggleHeight","menuHeight","colors","toggleBackground","toggleText","menuBorder","menuBackground","menuText","menuHoverBackground","menuHoverText","setStyle","setHtml","getAttribute","DropDown","_setIcon","setTemplate","setMode","console","log","_id","_toggleTrigger","_mouseOnElement","$dropDown","$dropDownToggle","$dropDownMenu","_loadMenuItems","addEventListener","_handleMouseOver","bind","_handleMouseOut","_toggleOpen","oldVal","newVal","event","force","classList","toggle","e","stopPropagation","icon","length","setAttribute","items","querySelectorAll","item","onclick","className","href","addCustomElement","require"],"mappings":"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","file":"web-com-test.e31bb0bc.js","sourceRoot":"..","sourcesContent":["class Template extends Object {\n    constructor() {\n        super();\n        this.template = document.createElement('template');\n        return this;\n    }\n    setStyle(style) {\n        this.style = style;\n        this.immutableStyle = style;\n        return this;\n    }\n    setHtml(html) {\n        if (typeof html == 'string') {\n            this.html = html;\n            this.immutableHtml = html;\n        } else if (typeof html == 'function') {\n            this.html = html();\n            this.immutableStyle = this.html;\n        }\n        return this;\n    }\n    setAttributes(attributes) {\n        if (typeof attributes == 'object') {\n            // Merge attributes\n            this.attributes = { ...this.attributes, ...attributes };\n            this.render();\n        }\n    }\n    getAttribute(name) {\n        return this.attributes[name] || null;\n    }\n    getTemplate() {\n        return this.template;\n    }\n    getCloned() {\n        return this.template.content.cloneNode(true);\n    }\n    updateAttributePlaceholders() {\n        const that = this;\n        const matcher = /({{)([a-zA-Z0-9\\-_]*)(}})/gi;\n        if (that.attributes) {\n            if (matcher.test(this.immutableHtml)) {\n                const newHtml = this.immutableHtml.replace(matcher, function ($match, $open, $attribute, $close) {\n                    return that.attributes[$attribute];\n                });\n                this.html = newHtml;\n            }\n        }\n\n    }\n    render() {\n        this.updateAttributePlaceholders();\n        this.template.innerHTML = `<style>${this.style}</style>${this.html}`;\n        return this;\n    }\n}\nexport default Template;","import Template from \"./template\";\n\nclass WebComponent extends HTMLElement {\n    /**\n     * Set Template\n     *\n     * @description Set the Template object that will be used for the component. This lets us isolate the\n     *              composition of the template outside of the component logic.\n     * @param {Template} template Instance of Template class.\n     * @return {WebComponent} Returns self for method chaining.\n     */\n    setTemplate(template) {\n\n        // Ensure valid template instance\n        if (!template instanceof Template) {\n            throw Error('Template must be an instance of the Template class!');\n        }\n\n        // Assign template locally\n        this.template = template;\n\n        return this;\n    }\n    /**\n     * Set Template\n     *\n     * @description Set the shadow DOM mode to open or closed. This is not necessary to call if you are ok with an\n     *              open mode (highly recommended).\n     * @param {String} mode Either \"open\" or \"closed\"\n     * @return {WebComponent} Returns self for method chaining.\n     */\n    setMode(mode) {\n\n        // Ensure valid mode\n        if (mode !== \"open\" && mode !== \"closed\") {\n            throw Error('Invalid shadom mode set. Expecting \"open\" or \"closed\".');\n        }\n\n        // Assign mode locally\n        this.mode = mode;\n\n        return this;\n    }\n\n    /**\n     * Set Attributes\n     *\n     * @description Set or update attributes in the Template instance.\n     * @param {Object} attributes\n     */\n    setAttributes(attributes) {\n\n        // Pass attributes to the template\n        if (this.template instanceof Template) {\n            this.template.setAttributes(attributes);\n        }\n\n        // Method chaining\n        return this;\n    }\n\n    /**\n     * Connected Callback\n     *\n     * @description Called when the custom component connects to the DOM. If component inheriting this class\n     *              implements an onConnect() method, we will call it.\n     */\n    connectedCallback() {\n\n        // Ensure we have a template\n        if (!this.template instanceof Template) {\n            throw Error('Cannot append template to shadow. Please use setTemplate() in the constructor!');\n        }\n\n        // Attach component to shadow DOM and append the template\n        this._shadowRoot = this.attachShadow({ \"mode\": (this.mode || \"open\") });\n        this._shadowRoot.appendChild(this.template.getCloned());\n\n        // Call the component's own connectedCallback handler\n        if (typeof this.onConnect == 'function') {\n            return this.onConnect();\n        }\n    }\n\n    /**\n     * Disconnected Callback\n     *\n     * @description Called when the custom component disconnects from the DOM. If component inheriting this class\n     *              implements an onDisconnect() method, we will call it.\n     */\n    disconnectedCallback() {\n        // Call the component's own disconnectedCallback handler\n        if (typeof this.onDisconnect == 'function') {\n            return this.onDisconnect();\n        }\n    }\n\n    /**\n     * Attribute Changed Callback\n     *\n     * @description Automatic callback in web components when an observed attribute is modified as defined in the\n     *              \"static get observedAttributes()\" method on the component. We take the new attribute and pass\n     *              it on to the template. If an element contains a data attribute with a matching name, we will\n     *              automatically update the value within the shadow DOM. Finally, if the component inheriting this\n     *              class implements an onAttributeChanged method, we call it with the values as well.\n     * @param {String} name Name of the attribute\n     * @param {String} oldValue Previous value of the attribute\n     * @param {String} newValue New value of the attribute\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n\n        // Pass updated attribute to template\n        const newAttributes = {};\n        newAttributes[name] = newValue;\n        this.setAttributes(newAttributes);\n\n        // If a data-* selector exists, update the value\n        this._updateDataElement(name, newValue);\n\n        // Call downstream callback\n        if (typeof this.onAttributeChanged == 'function') {\n            return this.onAttributeChanged(name, oldValue, newValue);\n        }\n    }\n\n    /**\n     * Adopted Callback\n     *\n     * @description Called when the custom element is moved from on HTML document to another (such as an iframe)\n     *              using the adoptNode() method. Only used in a multi-document context. If the component iheriting\n     *              this class implements an onAdopted() method, we will call it.\n     */\n    adoptedCallback() {\n        if (typeof this.onAdopted == 'function') {\n            return this.onAdopted();\n        }\n    }\n\n    /**\n     * Update element with data attribute\n     *\n     * @param {String} name Name of the data-* attribute\n     * @param {Mixed} value Value to set in the inner HTML\n     */\n    _updateDataElement(name, value) {\n        // Only update if the shadow root has been defined\n        if (this._shadowRoot) {\n            const el = this._shadowRoot.querySelector('[data-' + name + ']');\n            if (el) {\n                el.innerHTML = value;\n            }\n        }\n    }\n\n    /**\n     * Add Custom Element\n     *\n     * @static\n     * @description Wrapper around addition of custom elements to the window\n     * @param {String} name Name of custom component. Must be lowercase with a hyphen.\n     * @param {HTMLElement} element The custom component class\n     */\n    static addCustomElement(name, element) {\n        window.customElements.define(name, element);\n    }\n}\n\nexport default WebComponent;","import Template from '../base/template';\nimport WebComponent from '../base/webcomponent';\n\n/**\n * Build Template\n *\n * Wrap template build inside a function so we can pass the component context through\n * @param {WebComponent}\n */\nconst _DropDownTemplate = function (context) {\n\n    const options = {\n        toggleHeight: \"4.7rem\",\n        menuHeight: \"4.8rem\", // Account for borders\n        colors: {\n            toggleBackground: '#335E7A', // SLATE D1\n            toggleText: '#FFFFFF', // WHITE\n            menuBorder: '#EAEEF1', // MYSTICK GREY L3\n            menuBackground: '#F6F8FA', // MYSTICK GREY L2\n            menuText: '#335E7A', // SLATE D1\n            menuHoverBackground: '#EAEEF1', // MYSTICK GREY L3\n            menuHoverText: '#335E7A', // SLATE D1\n        }\n    };\n\n    return new Template(context)\n        .setStyle(/*css*/`\n            *, *:after {\n                box-sizing: border-box;\n            }\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: auto;\n                padding: 0rem;\n                border: 0px;\n            }\n            :host([hidden]) { display: none }\n            .ux-dropdown {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                width: 100%;\n            }\n            .ux-dropdown__toggle {\n                display: flex;\n                flex-direction: row;\n                width: 100%;\n                padding: 0rem;\n                background-color: ${options.colors.toggleBackground};\n                color: ${options.colors.toggleText};\n                border: 1px solid ${options.colors.toggleBackground};\n                height: ${options.toggleHeight};\n            }\n            .ux-dropdown__toggle__label {\n                display: inline-block;\n                width: 90%;\n                color: ${options.colors.toggleText};\n                margin: 0.8rem;\n                line-height: 3rem;\n            }\n            .ux-dropdown__toggle:hover {\n                cursor: pointer;\n            }\n            .ux-dropdown__toggle__icon {\n                display: inline-block;\n                width: 30px; /* Fixed width image can rotate centered */\n                text-align: right;\n                color: ${options.colors.toggleText};\n                margin: 0.8rem;\n                -webkit-transform:rotate(-360deg);\n                -moz-transform: rotate(-360deg);\n                -ms-transform: rotate(-360deg);\n                -o-transform: rotate(-360deg);\n                transform: rotate(-360deg);\n                transition: transform 150ms ease;\n            }\n            .ux-dropdown__toggle__icon svg {\n                fill: ${options.colors.toggleText};\n                max-height: 3rem;\n            }\n            .ux-dropdown--open .ux-dropdown__toggle__icon {\n                -webkit-transform:rotate(-180deg);\n                -moz-transform: rotate(-180deg);\n                -ms-transform: rotate(-180deg);\n                -o-transform: rotate(-180deg);\n                transform: rotate(-180deg);\n                transition: transform 150ms ease;\n            }\n            .ux-dropdown__menu {\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n                position: absolute;\n                top: ${options.toggleHeight};\n                width: 100%;\n                padding: 0rem;\n                border-width: 0px;\n                max-height: 0;\n                visibility: hidden;\n                -webkit-animation: slideUp 0.3s ease-out forwards;\n                -moz-animation: slideUp 0.3s ease-out forwards;\n                -o-animation: slideUp 0.3s ease-out forwards;\n                animation: slideUp 0.3s ease-out forwards;\n            }\n            .ux-dropdown--open > .ux-dropdown__menu {\n                overflow: initial;\n                z-index: 10000;\n                visibility: visible;\n                overflow-y: hidden;\n                -webkit-animation: slideDown 10s ease-out forwards;\n                -moz-animation: slideDown 10s ease-out forwards;\n                -o-animation: slideDown 10s ease-out forwards;\n                animation: slideDown 10s ease-out forwards;\n            }\n            .ux-dropdown__menu__item {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                background-color: ${options.colors.menuBackground};\n                color: ${options.colors.menuText};\n                list-style: none;\n                margin: 0rem;\n                padding: 0rem;\n            }\n            .ux-dropdown__menu__item:hover {\n                background-color: ${options.colors.menuHoverBackground};\n                color: ${options.colors.menuHoverText};\n                cursor: pointer;\n            }\n            .ux-dropdown__menu__divider {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                background-color: ${options.colors.menuBackground};\n                color: ${options.colors.menuText};\n                list-style: none;\n                margin: 0rem;\n                padding: 0rem;\n            }\n            .ux-dropdown__menu__divider hr {\n                border: 1px solid transparent;\n                border-top: 1px solid ${options.colors.menuBorder};\n                height: 1px;\n                width: 100%;\n                margin: 0rem;\n            }\n            .ux-dropdown__menu__item span,\n            .ux-dropdown__menu__item a {\n                margin: 0.8rem;\n            }\n            .ux-dropdown__menu__item a,\n            .ux-dropdown__menu__item a:hover,\n            .ux-dropdown__menu__item a:visited,\n            .ux-dropdown__menu__item a:active {\n                text-decoration: none;\n                color: ${options.colors.menuText};\n            }\n            @keyframes slideDown {\n                from {\n                    max-height: 0;\n                }\n                to {\n                    max-height: 5000px;\n                }\n            }\n            @keyframes slideUp {\n                from {\n                    max-height: 5000px;\n                }\n                to {\n                    max-height: 0px;\n                }\n            }\n        `)\n        .setHtml(/*html*/`\n            <div class=\"ux-dropdown\">\n                <div class=\"ux-dropdown__toggle\">\n                    <div class=\"ux-dropdown__toggle__label\" data-label>\n                        ${context.getAttribute('label')}\n                    </div>\n                    <div class=\"ux-dropdown__toggle__icon\" data-icon>\n                        ${(context.getAttribute('icon') == \"false\" ? \"\" : context.getAttribute('icon'))}\n                    </div>\n                </div>\n                <div class=\"ux-dropdown__menu\"></div>\n            </div>\n        `);\n\n};\n\nclass DropDown extends WebComponent {\n    /**\n     * Attributes MUST be set here in order to use within components onAttributeChanged event\n     */\n    static get observedAttributes() {\n        return [\n            'id',\n            'label',\n            'icon',\n            'trigger'\n        ];\n    }\n    /**\n     * Initialize Component\n     *\n     * @description We setup the dynamic icon, initialize the template, set the component mode, and then\n     *              render the template content with dynamic contextual parameters.\n     */\n    constructor() {\n        //Parent initialization\n        super();\n\n        // Dynamically set the icon\n        this._setIcon(this.getAttribute('icon'));\n\n        // Set the template instance to be used with component. We pass this component to the template for\n        // variable context, which allows for dynamic templating.\n        this.setTemplate(_DropDownTemplate(this));\n\n        // Set the default mode of the component to open. There is almost never a reason to use \"closed\".\n        this.setMode(\"open\");\n\n        // Make the template render with it's context\n        this.template.render();\n    }\n\n    /**\n     * On Connect\n     *\n     * @description This is a callback from the parent when \"connectedCallback\" is called. The WebComponent we extend\n     *              handles the initialization of the template and attaches the shadow DOM for us. Here we want to\n     *              get element references, load the menu items, and setup event listeners.\n     */\n    onConnect() {\n        console.log('[COMPONENT_NOTICE] <drop-down> component connected.');\n\n        // Init\n        this._id = this.getAttribute('id');\n        this._toggleTrigger = this.getAttribute('trigger');\n        this._mouseOnElement = false;\n\n        // Store Element References\n        this.$dropDown = this._shadowRoot.querySelector('.ux-dropdown');\n        this.$dropDownToggle = this._shadowRoot.querySelector('.ux-dropdown__toggle');\n        this.$dropDownMenu = this._shadowRoot.querySelector('.ux-dropdown__menu');\n\n        // Load items\n        this._loadMenuItems();\n\n        // Set open close handler based on the trigger mode: \"click\" or \"hover\". Click is default.\n        if (this._toggleTrigger == \"hover\") {\n            this.$dropDown.addEventListener('mouseover', this._handleMouseOver.bind(this));\n            this.$dropDown.addEventListener('mouseout', this._handleMouseOut.bind(this));\n        } else {\n            this.$dropDownToggle.addEventListener('click', this._toggleOpen.bind(this));\n        }\n    }\n\n    /**\n     * On Disconnect\n     *\n     * @description This is a callback from the parent when \"disconnectedCallback\" is called. We can perform any \n     *              cleanup we need to do here.\n     */\n    onDisconnect() {\n        console.log('[COMPONENT_NOTICE] <drop-down> component disconnected.');\n    }\n\n    /**\n     * On Attribute Changed\n     *\n     * @description This is a callback from the parent when \"attributeChangedCallback\" is called. The parent\n     *              WebComponent class handles notifying the template of attribute updates and any dynamic\n     *              updates by using data-* attributes matching the attribute name.\n     */\n    onAttributeChanged(name, oldVal, newVal) {\n        console.log(`[COMPONENT_NOTICE] <drop-down> component attribtute changed: ${name} changed from \"${oldVal}\" to \"${newVal}\"`);\n    }\n\n    /**\n     * On Adopted\n     *\n     * @description This is a callback from the parent when \"adoptedCallback\" is called. This occurs when component\n     *              moves to another document, such as an iframe, using adoptNode(). This is not a common behavior\n     *              and handling this method within your component is often unnecessary.\n     */\n    onAdopted() {\n        console.log('[COMPONENT_NOTICE] <drop-down> component adopted.');\n    }\n\n    /**\n     * Toggle Menu Class to Open Menu\n     *\n     * @description Toggle the CSS class on the dropdown in order to open/close the menu.\n     * @param {Event} event\n     * @param {Boolean} force An option to force the toggle despite mouse position\n     */\n    _toggleOpen(event, force) {\n        if (force) {\n            this._mouseOnElement = false;\n        }\n        this.$dropDown.classList.toggle('ux-dropdown--open');\n    }\n\n    _handleMouseOver(e) {\n        e.stopPropagation();\n        if (this._mouseOnElement === false) {\n            this._mouseOnElement = true;\n            this._toggleOpen();\n        }\n    }\n\n    _handleMouseOut(e) {\n        e.stopPropagation();\n        if (this._mouseOnElement === true) {\n            this._mouseOnElement = false;\n            this._toggleOpen();\n        }\n    }\n\n    /**\n     * Set Toggle Icon\n     *\n     * @param {String} icon An image path, \"false\" to disable, or empty to default to chevron\n     */\n    _setIcon(icon) {\n\n        // No icon option\n        if (icon === false || icon === \"false\") {\n            return;\n        }\n\n        // Image source option\n        if (typeof icon === 'string' && icon.length > 1) {\n            this.setAttribute('icon', `\n                <img src=\"${icon}\" alt=\"Toggle Dropdown\" width=\"30px\" />\n            `);\n            return;\n        }\n\n        // Default option -- uses SVG chevron that Google Material UI uses\n        this.setAttribute('icon', `\n            <svg\n                focusable=\"false\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n            >\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"></path>\n            </svg>\n        `);\n    }\n\n    /**\n     * Load Menu Items\n     *\n     * @description Pull in the elements inside the <drop-down> and initialize them as menu items.\n     */\n    _loadMenuItems() {\n        // IMPORTANT NOTE: A unique ID is REQUIRED to be placed as an attribute on the component\n        // or loading the menu items will not work correctly!\n        const items = document.querySelectorAll(`drop-down[id=\"${this._id}\"] > *`);\n        if (items.length > 0) {\n            for (const item of items) {\n\n                // Set handler to close dropdown when item is selected\n                const that = this;\n                item.onclick = function (event) {\n                    that._toggleOpen(event, true);\n                    return event;\n                }\n\n                if (item.getAttribute('type') === \"divider\") {\n                    // Divider type\n                    item.className = \"ux-dropdown__menu__item ux-dropdown__menu__divider\";\n                    item.innerHTML = \"<hr />\";\n                } else if (item.getAttribute('type') === \"link\") {\n                    // Link type\n                    let href = item.getAttribute('href');\n                    item.className = \"ux-dropdown__menu__item\";\n                    item.innerHTML = \"<a href=\\\"\" + href + \"\\\">\" + item.innerHTML + \"</a>\";\n                } else {\n                    item.className = \"ux-dropdown__menu__item\";\n                    item.innerHTML = \"<span>\" + item.innerHTML + \"</span>\";\n                }\n\n                this.$dropDownMenu.appendChild(item);\n\n            }\n        } else {\n            console.log('[COMPONENT_ERROR] <drop-down> component cannot initialize with empty items.');\n        }\n    }\n}\n\nWebComponent.addCustomElement('drop-down', DropDown);","require('./components/dropdown/dropdown');"]}